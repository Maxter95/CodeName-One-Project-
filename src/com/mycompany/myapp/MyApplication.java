package com.mycompany.myapp;


import com.codename1.components.SpanLabel;
import com.codename1.io.CharArrayReader;
import com.codename1.io.ConnectionRequest;
import com.codename1.io.JSONParser;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;
import com.codename1.io.NetworkEvent;
import com.codename1.io.NetworkManager;
import com.codename1.l10n.ParseException;
import com.codename1.l10n.SimpleDateFormat;
import com.codename1.ui.AutoCompleteTextField;
import com.codename1.ui.Button;
import com.codename1.ui.Image;
import com.codename1.ui.TextField;
import com.codename1.ui.Toolbar;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.layouts.BoxLayout;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javafx.scene.layout.BackgroundImage;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class MyApplication {

    private Form current;
    private Resources theme;
   ArrayList<String> heb = new ArrayList<>();
    public void init(Object context) {
        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature, uncomment if you have a pro subscription
        // Log.bindCrashProtection(true);
    }
    
    public void start() {
        if(current != null){
            current.show();
            return;
        }
        
        Image img2=theme.getImage("maison11.png");
        Image img1=theme.getImage("back-command.png");
        Form f = new Form("Menu", BoxLayout.y());
      
        Form f3 = new Form("liste de hebergement", BoxLayout.y());
        Button bt3=new Button("afficher tout les hebergements");
        Form f5 = new Form("annuler reservation", BoxLayout.y());
        Button bt5=new Button("annuler reservation");
        Form f6 = new Form("chercher une hebergement", BoxLayout.y());
        Button bt6=new Button("chercher une hebergement");
         Form f2 = new Form("reserver hebergement", BoxLayout.y());
        Button bt2=new Button("reserver hebergement");
        Form f4 = new Form("liste de reservation", BoxLayout.y());
        Button bt4=new Button("afficher mes reservation");
         Button btannuler=new Button("confirmer");
         Button btsher=new Button("chercher");
       // Button btnup=new Button("confirmer");
       TextField tfidh = new TextField("", "id hebegemnt a reserver");
        TextField tfnbn = new TextField("", "nombre de nuit");
        TextField tfn = new TextField("", "nom");
        TextField tfidrh = new TextField("", "id reservation");
        TextField tfs = new TextField();
        f.add(bt3);
        f.add(bt4);
        //f.add(bt2);
       // f.add(bt5);
       // f.add(bt6);
        Button btnOk = new Button("reserver");
        f2.add(btnOk);
        f2.add(tfn);
        f2.add(tfidh);
        f2.add(tfnbn);
        f5.add(tfidrh);
        f5.add(btannuler);
     
        f6.add(btsher);
          
      //	f.setBgImage(img2);
      //  findAllheb();
        
       
        
        
        //************recherche***************
     bt6.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent evt) {

             f6.show();
             btsher.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent evt) {

             
          
        ConnectionRequest con = new ConnectionRequest();
        con.setUrl("http://localhost/codename/search.php?adresse_hebergement=" + tfs.getText() +""  );
        con.addResponseListener(new ActionListener<NetworkEvent>() {

            @Override
            public void actionPerformed(NetworkEvent evt) {
                //hebergement hebergement= getEvenement(new String(con.getResponseData()));
                               ArrayList<hebergement> hebergements= getListEvenement(new String(con.getResponseData()));

                        SpanLabel sp = new SpanLabel();
                         f6.add(sp);
                         sp.setText(hebergements.toString());
                         f6.refreshTheme();
                    
                
               // System.out.println(getListEvenement(new String(con.getResponseData())));
               // sp.setText(getListEvenement(new String(con.getResponseData())) + "");
                //hi.refreshTheme();

            }
        });
        NetworkManager.getInstance().addToQueue(con);
          }  
                });

             }  
                });
        
        //**************************************
        f3.getToolbar().addCommandToLeftBar("back",img1,new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                f.show();
            }
        });
        f4.getToolbar().addCommandToLeftBar("menu",img1,new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                f.show();
            }
        });
        f2.getToolbar().addCommandToLeftBar("menu",img1,new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                f.show();
            }
        });
        f5.getToolbar().addCommandToLeftBar("menu",img1,new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                f.show();
            }
        });
        f6.getToolbar().addCommandToLeftBar("menu",img1,new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                f.show();
            }
        });
        //*******************************************
        f.getToolbar().addCommandToSideMenu("cherecher hebergement ",null,new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
              f6.show();
              
            }
        });
////        f.getToolbar().addCommandToSideMenu("afficher tout les hebergements ",null,new ActionListener() {
////            @Override
////            public void actionPerformed(ActionEvent evt) {
////              f3.show();
////              
////            }
////        });
        f.getToolbar().addCommandToSideMenu("reserver hebergement ",null,new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
              f2.show();
              
            }
        });
//        f.getToolbar().addCommandToSideMenu("afficher mes reservations ",null,new ActionListener() {
//            @Override
//            public void actionPerformed(ActionEvent evt) {
//              f4.show();
//              
//            }
//        });
        f.getToolbar().addCommandToSideMenu("annuler reservation ",null,new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
              f5.show();
              
            }
        });
        //***********annuler reservation **********************
         bt5.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent evt) {

             f5.show();
        btannuler.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent evt) {

                ConnectionRequest req = new ConnectionRequest();
                req.setUrl("http://localhost/codename/delete.php?id_res_h=" + tfidrh.getText()  + "");
                             
                req.addResponseListener(new ActionListener<NetworkEvent>() {

                    @Override
                    public void actionPerformed(NetworkEvent evt) {
                        byte[] data = (byte[]) evt.getMetaData();
                        String s = new String(data);
                            Dialog.show("Confirmation", "reservation annul√©", "Ok", null);

                       
                    }
                    
                });
                
                NetworkManager.getInstance().addToQueue(req);
                

            }
        });
        
          }
            });
        //***************************************************
        //****************reservation***********************
        bt2.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent evt) {

             f2.show();
        btnOk.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent evt) {

                ConnectionRequest req = new ConnectionRequest();
                req.setUrl("http://localhost/codename/insert.php?idHebergement=" + tfidh.getText()  + "&nom_utilisateur_h=" + tfn.getText()+ "&nbr_nuit_h=" + tfnbn.getText() + "");

                req.addResponseListener(new ActionListener<NetworkEvent>() {

                    @Override
                    public void actionPerformed(NetworkEvent evt) {
                        byte[] data = (byte[]) evt.getMetaData();
                        String s = new String(data);
                            Dialog.show("Confirmation", "ajout ok", "Ok", null);

                       
                    }
                    
                });
      req.setUrl("http://localhost/codename/update.php?id_hebergement=" + tfidh.getText()  + "");

                req.addResponseListener(new ActionListener<NetworkEvent>() {

                    @Override
                    public void actionPerformed(NetworkEvent evt) {
                        byte[] data = (byte[]) evt.getMetaData();
                        String s = new String(data);
                            //Dialog.show("Confirmation", "ajout ok", "Ok", null);

                       
                    }
                    
                });
                NetworkManager.getInstance().addToQueue(req);
                

            }
        });
        
          }
            });
    
        //********************************************
        //-----affichage hebergement----
          bt3.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent evt) {

             f3.show();
              ConnectionRequest con = new ConnectionRequest();
        con.setUrl("http://localhost/codename/select.php");
        con.addResponseListener(new ActionListener<NetworkEvent>() {

            @Override
            public void actionPerformed(NetworkEvent evt) {
                ArrayList<hebergement> hebergements= getListEvenement(new String(con.getResponseData()));
                 for (int i = 0; i < hebergements.size(); i++) {
                   
                        SpanLabel sp = new SpanLabel();
                        
                         f3.add(sp);
                         sp.setText(hebergements.get(i).toString());
                            
                     
Label l =new Label ("***************************************");
f3.add(l);
f3.refreshTheme();

                        
                    }
                
             

            }
        });
        NetworkManager.getInstance().addToQueue(con);
            }  
                });
        //------------------
        //*************affichager reservation*********************
        
          bt4.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent evt) {

             f4.show();
              ConnectionRequest con = new ConnectionRequest();
        con.setUrl("http://localhost/codename/select2.php");
        con.addResponseListener(new ActionListener<NetworkEvent>() {

            @Override
            public void actionPerformed(NetworkEvent evt) {
                ArrayList<reservation_hebergement> reservation_hebergements= getListEvenement2(new String(con.getResponseData()));
                 for (int i = 0; i < reservation_hebergements.size(); i++) {
                   
                        SpanLabel sp = new SpanLabel();
                        
                         f4.add(sp);
                         sp.setText(reservation_hebergements.get(i).toString());
                            
                         f4.refreshTheme();
                        
                    }
                
             

            }
        });
        NetworkManager.getInstance().addToQueue(con);
            }  
                });
        
        //********************************************************
        f.show();
    }
    //*******************affichage hebergement*************
    public hebergement getEvenement(String json) {
        hebergement Hebergements = new hebergement();

        try {

            JSONParser j = new JSONParser();

            Map<String, Object> hebergements = j.parseJSON(new CharArrayReader(json.toCharArray()));

            System.out.println();
            Map<String, Object> obj = (Map<String, Object>) hebergements.get("hebergement");

            
                hebergement e = new hebergement();
              e.setId_hebergement(Integer.parseInt(obj.get("id_hebergement").toString()));
                e.setAdresse_hebergement((String)obj.get("adresse_hebergement"));
             
                          
                e.setType_hebergement((String)obj.get("type_hebergement"));
                e.setDescription((String)obj.get("description"));
                 e.setPrix_hebergement(Float.parseFloat(obj.get("prix_hebergement").toString()));
              e.setDisponibilite(Integer.parseInt(obj.get("disponibilite").toString()));
                e.setUtilisateurs((String)obj.get("utilisateurs"));
                Hebergements=e;

            

        } catch (IOException ex) {
         }
        return Hebergements;

    }
    public ArrayList<hebergement> getListEvenement(String json) {
        ArrayList<hebergement> listEvenements = new ArrayList<>();

        try {

            JSONParser j = new JSONParser();

            Map<String, Object> hebergements = j.parseJSON(new CharArrayReader(json.toCharArray()));

            System.out.println();
            List<Map<String, Object>> list = (List<Map<String, Object>>) hebergements.get("hebergement");

            for (Map<String, Object> obj : list) {
                hebergement e = new hebergement();
                 e.setId_hebergement(Integer.parseInt(obj.get("id_hebergement").toString()));
                 //e.setId_hebergement((Integer.parseInt(obj.get("id_hebergement"))));
                 e.setAdresse_hebergement((String)obj.get("adresse_hebergement"));
             
                          
                e.setType_hebergement((String)obj.get("type_hebergement"));
                e.setDescription((String)obj.get("description"));
              e.setPrix_hebergement(Float.parseFloat(obj.get("prix_hebergement").toString()));
              e.setDisponibilite(Integer.parseInt(obj.get("disponibilite").toString()));
              //  e.setPrix_hebergement((float)obj.get("prix_hebergement"));
              //  e.setDisponibilite((int)obj.get("disponibilite"));
                e.setUtilisateurs((String)obj.get("utilisateurs"));
                listEvenements.add(e);

            }

        } catch (IOException ex) {
         }
        return listEvenements;

    }
//*********************************************************************
    //***************affichage reservation hebergement***********************
    public reservation_hebergement getEvenement2(String json) {
        reservation_hebergement Reservation_hebergements = new reservation_hebergement();

        try {

            JSONParser j = new JSONParser();

            Map<String, Object> reservation_hebergements = j.parseJSON(new CharArrayReader(json.toCharArray()));

            System.out.println();
            Map<String, Object> obj = (Map<String, Object>) reservation_hebergements.get("reservation_hebergement");

            
                reservation_hebergement e = new reservation_hebergement();
                e.setId_res_h((int)obj.get("id_res_h"));
                e.setIdHebergement((int)obj.get("idHebergement"));
             
                          
                e.setNom_utilisateur_h((String)obj.get("nom_utilisateur_h"));
                e.setNbr_nuit_h((int)obj.get("nbr_nuit_h"));
               
                
                Reservation_hebergements=e;

            

        } catch (IOException ex) {
         }
        return Reservation_hebergements;

    }
    public ArrayList<reservation_hebergement> getListEvenement2(String json) {
        ArrayList<reservation_hebergement> listEvenements2 = new ArrayList<>();

        try {

            JSONParser j = new JSONParser();

            Map<String, Object> reservation_hebergements = j.parseJSON(new CharArrayReader(json.toCharArray()));

            System.out.println();
            List<Map<String, Object>> list = (List<Map<String, Object>>) reservation_hebergements.get("reservation_hebergement");

            for (Map<String, Object> obj : list) {
                reservation_hebergement e = new reservation_hebergement();
                 e.setId_res_h(Integer.parseInt(obj.get("id_res_h").toString()));
                e.setIdHebergement(Integer.parseInt(obj.get("idHebergement").toString()));
                 e.setNom_utilisateur_h((String)obj.get("nom_utilisateur_h"));
                 e.setNbr_nuit_h(Integer.parseInt(obj.get("nbr_nuit_h").toString()));
             
                          
               
                listEvenements2.add(e);

            }

        } catch (IOException ex) {
         }
        return listEvenements2;

    }
     //******************
    
    //*********
//    public void findAllheb(){
//      
//        ConnectionRequest  c = new ConnectionRequest() {
//       
//            @Override
//            protected void readResponse(InputStream in) throws IOException {
//
//                JSONParser json = new JSONParser();
//                try {
//                    Reader reader = new InputStreamReader(in, "UTF-8");
//
//                    Map<String, Object> data = json.parseJSON(reader);
//                    List<Map<String, Object>> content = (List<Map<String, Object>>) data.get("hebergement");
//                    heb.clear();
//                  
//                    for (Map<String, Object> obj : content) {
//                    
//                       
//                        heb.add(
//                                (String)obj.get("adresse_hebergement")
//                                
//                     
//                        ); 
//                        
//                        
//                        /*
//                        voitures.add(new Voiture(Integer.parseInt((String)obj.get("id_discussion")),(String) obj.get("titre_discussion"),
//                                (String) obj.get("categorie"),(String) obj.get("descriptif"),(String) obj.get("image_name")
//                     )
//                        );  */
//                        
//                    }
//                    
//                
//                } catch (IOException err) {
//                    Log.e(err);
//                }
//            }
//            @Override
//            protected void postResponse() {
//           com.codename1.ui.List uiLibsList = new com.codename1.ui.List();
//        for (String h : heb){
//              System.out.print("*nikakshia*");
//        System.out.print(h);
//        }
//        String[] arr = heb.toArray(new String[heb.size()]);
//    
//        System.out.println("**");
//                  AutoCompleteTextField recherche = new AutoCompleteTextField(arr);
//                     f6.add(recherche);
//           recherche.addListListener(new ActionListener() {
//                    @Override
//    
//            public void actionPerformed(ActionEvent evt) {
//
//             
//          
//        ConnectionRequest con = new ConnectionRequest();
//        String a = evt.getSource().toString();
//        int b = a.indexOf("index = ") ;
//        int o = a.indexOf(", size =");
//       String c = a.substring(b,o);
//       
//                        String r = c.substring(0,c.indexOf("index"));
//      
//    
//                        System.out.println("Reponse  "+r);
//        con.setUrl("http://localhost/codename/search.php?adresse_hebergement="+evt.getSource().toString()+""  );
//        con.addResponseListener(new ActionListener<NetworkEvent>() {
//
//            @Override
//            public void actionPerformed(NetworkEvent evt) {
//               // hebergement hebergement= getEvenement(new String(con.getResponseData()));
// ArrayList<hebergement> hebergements= getListEvenement(new String(con.getResponseData()));
//                        SpanLabel sp = new SpanLabel();
//                         f6.add(sp);
//                         sp.setText(hebergements.toString());
//                         f6.refreshTheme();
//                    
//                
////                System.out.println(getListEvenement(new String(con.getResponseData())));
////                sp.setText(getListEvenement(new String(con.getResponseData())) + "");
////                //hi.refreshTheme();
//
//            }
//        });
//        NetworkManager.getInstance().addToQueue(con);
//          }  
//                });
//
//            
//
//            
//
//            }
//      
//
//    
//        
//    
//    };
//             c.setUrl("http://localhost/codename/select.php");
//        NetworkManager.getInstance().addToQueue(c);
//    
//          }
    //************************************************************************
    public void stop() {
        current = Display.getInstance().getCurrent();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = Display.getInstance().getCurrent();
        }
    }
    
    
    public void destroy() {
    }

}
